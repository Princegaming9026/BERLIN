import os
from telethon.sync import TelegramClient
from telethon.tl.functions.channels import GetParticipantsRequest
from telethon.tl.types import ChannelParticipantsSearch

# Function to create the "hits" folder if it doesn't exist
def create_hits_folder():
    storage_path = '/storage/emulated/0/hits'
    os.makedirs(storage_path, exist_ok=True)  # Create the directory if it does not exist

# Function to save usernames to data.txt
def save_usernames(client, group_identifier):
    create_hits_folder()  # Create the "hits" folder if it doesn't exist

    offset_user = 0
    limit_user = 100
    all_participants = []
    success_count = 0
    fail_count = 0

    while True:
        try:
            participants = client(GetParticipantsRequest(
                group_identifier, ChannelParticipantsSearch(''),
                offset_user, limit_user, hash=0
            ))
            if not participants.users:
                break
            all_participants.extend(participants.users)
            offset_user += len(participants.users)
        except Exception as e:
            print("Failed to fetch participants:", str(e))
            return

    # Open the file to write the usernames
    with open(os.path.join(storage_path, 'data.txt'), 'w') as f:
        for user in all_participants:
            if user.username:
                try:
                    # Prepend '@' before each username
                    f.write('@' + user.username + '\n')
                    print("✅ Data Stored")
                    success_count += 1
                except Exception as e:
                    print("❌ Failed to store username:", str(e))
                    fail_count += 1

    print("Mission Complete 🚭")
    print(f"Total Usernames Stored Successfully: {success_count}")
    print(f"Total Failures: {fail_count}")

# Main function
def main():
    # Print name in ASCII art format
    print("""
  ____  _____ ____  _     ___ _   _ 
 | __ )| ____|  _ \| |   |_ _| \ | |
 |  _ \|  _| | |_) | |    | ||  \| |
 | |_) | |___|  _ <| |___ | || |\  |
 |____/|_____|_| \_\_____|___|_| \_|
                                    
                                                      
    """)

    name = input("Enter your name: ")
    api_id = input("Enter your API ID: ")
    api_hash = input("Enter your API Hash: ")
    group_identifier = input("Enter the group identifier: ")

    with TelegramClient(name, api_id, api_hash) as client:
        client.start()
        save_usernames(client, group_identifier)

if __name__ == '__main__':
    main()